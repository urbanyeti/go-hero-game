// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameWorldClient is the client API for GameWorld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameWorldClient interface {
	GetRandomItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Item, error)
}

type gameWorldClient struct {
	cc grpc.ClientConnInterface
}

func NewGameWorldClient(cc grpc.ClientConnInterface) GameWorldClient {
	return &gameWorldClient{cc}
}

func (c *gameWorldClient) GetRandomItem(ctx context.Context, in *ItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/gameworld.GameWorld/GetRandomItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameWorldServer is the server API for GameWorld service.
// All implementations must embed UnimplementedGameWorldServer
// for forward compatibility
type GameWorldServer interface {
	GetRandomItem(context.Context, *ItemRequest) (*Item, error)
	mustEmbedUnimplementedGameWorldServer()
}

// UnimplementedGameWorldServer must be embedded to have forward compatible implementations.
type UnimplementedGameWorldServer struct {
}

func (UnimplementedGameWorldServer) GetRandomItem(context.Context, *ItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomItem not implemented")
}
func (UnimplementedGameWorldServer) mustEmbedUnimplementedGameWorldServer() {}

// UnsafeGameWorldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameWorldServer will
// result in compilation errors.
type UnsafeGameWorldServer interface {
	mustEmbedUnimplementedGameWorldServer()
}

func RegisterGameWorldServer(s grpc.ServiceRegistrar, srv GameWorldServer) {
	s.RegisterService(&GameWorld_ServiceDesc, srv)
}

func _GameWorld_GetRandomItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameWorldServer).GetRandomItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gameworld.GameWorld/GetRandomItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameWorldServer).GetRandomItem(ctx, req.(*ItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameWorld_ServiceDesc is the grpc.ServiceDesc for GameWorld service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameWorld_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameworld.GameWorld",
	HandlerType: (*GameWorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomItem",
			Handler:    _GameWorld_GetRandomItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/game_world.proto",
}
